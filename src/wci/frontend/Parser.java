package wci.frontend;

import wci.intermediate.ICode;
import wci.intermediate.SymTab;

/**
 * language-independent framework class. This abstract parser class will be implemented by
 * language-specific subclasses.
 */
public abstract class Parser {

   // generated symbol table
   protected static SymTab symTab;

   static{
      symTab = null;
   }

   // scanner used with the parser
   protected Scanner scanner;

   // intermediate cody generated by this parser
   protected ICode icode;

   /**
    * Constructor
    * @param scanner the scanner to be used with this parser.
    */
   protected Parser(Scanner scanner){
      this.scanner = scanner;
      this.icode = null;
   }

   /**
    * Parse a source program and generate the intermediate code and this symbol table. To be implemented by
    * a language-specific parser subclass.
    * @throws Exception if an error occurred.
    */
   public abstract void parse() throws Exception;

   /**
    * Return the number of syntax errors found by the parser.
    * To be implemented by a language-specific parser subclass.
    * @return the error count
    */
   public abstract int getErrorCount();

   /**
    * Call the scanner's currentToken() method.
    * @return the current token.
    */
   public Token currentToken(){
      return scanner.currentToken();
   }

   /**
    * Call the scanner's nextToken() method.
    * @return the next token.
    * @throws Exception if an error occurred.
    */
   public Token nextToken() throws Exception{
      return scanner.nextToken();
   }
}
